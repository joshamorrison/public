version: '3.8'

services:
  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: automl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: automl-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: automl
      POSTGRES_USER: automl
      POSTGRES_PASSWORD: automl_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U automl"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AutoML API Service
  api:
    build:
      context: ..
      dockerfile: docker/api.Dockerfile
    container_name: automl-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://automl:automl_password@postgres:5432/automl
      - REDIS_URL=redis://redis:6379/0
      - API_SECRET_KEY=your-secret-key-here
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - api_data:/app/data
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Interface
  streamlit:
    build:
      context: ..
      dockerfile: docker/streamlit.Dockerfile
    container_name: automl-streamlit
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://api:8000
    ports:
      - "8501:8501"
    volumes:
      - streamlit_data:/app/data
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: automl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - streamlit
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: automl-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: automl-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_data:
    driver: local
  api_logs:
    driver: local
  streamlit_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: automl-network